{"version":3,"file":"static/js/475.744b40bd.chunk.js","mappings":"sTAEaA,EAAWC,EAAAA,GAAAA,GAAH,mIAQRC,EAAeD,EAAAA,GAAAA,GAAH,iWAkBZE,EAAYF,EAAAA,GAAAA,IAAH,sLAYTG,EAAWH,EAAAA,GAAAA,EAAH,8CAIRI,EAAgBJ,EAAAA,GAAAA,EAAH,+D,SCiC1B,EA3Da,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAEYC,EAAAA,EAAAA,IAAgBT,GAF5B,OAERU,EAFQ,OAGRC,EAAeD,EAAYP,KAAKS,KAAI,SAAAC,GAAK,MAAK,CAClDC,KAAMD,EAAMC,KACZC,GAAIF,EAAME,GACVC,aAAcH,EAAMG,aACpBC,UAAWJ,EAAMI,WAAa,UAJe,IAM/Cb,EAAQO,GATM,gDAWdO,EAAAA,GAAAA,MAAA,iBAAsB,KAAMC,UAXd,yBAadb,GAAa,GAbC,4EAAH,qDAiBfE,GACD,GAAE,CAACR,KAGF,iCACE,SAAC,KAAD,CAAgBoB,UAAW,MAC1Bf,GACC,SAACgB,EAAA,EAAD,KAEA,8BACGlB,EAAKmB,OAAS,GACb,SAAC5B,EAAD,UACGS,EAAKS,KAAI,SAAAC,GAAK,OACb,UAACjB,EAAD,YACE,SAACC,EAAD,CACE0B,IACEV,EAAMG,aAAN,yCACsCH,EAAMG,c,k+KAG9CQ,IAAKX,EAAMC,QAEb,SAAChB,EAAD,UAAWe,EAAMC,QACjB,UAACf,EAAD,WAAe,cAAYc,EAAMI,eAVhBJ,EAAME,GADZ,OAgBjB,uBAAG,+CAMd,C,iMCzEKU,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIAC,EAAS,mCAAG,6GAESC,EAAAA,EAAAA,IAAU,+DAAgEN,GAFnF,cAERO,EAFQ,yBAGPA,EAASC,MAHF,sCAKdC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMjB,SANR,yDAAH,qDAUTkB,EAAY,mCAAG,WAAOrC,GAAP,gGAEM+B,EAAAA,EAAAA,IAAA,6CAAgD/B,EAAhD,mBAA0EyB,GAFhF,cAEXO,EAFW,yBAGVA,EAASC,MAHC,sCAKjBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMjB,SANL,yDAAH,sDAUZV,EAAe,mCAAG,WAAOT,GAAP,gGAEG+B,EAAAA,EAAAA,IAAA,6CAAgD/B,EAAhD,2BAAkFyB,GAFrF,cAEdO,EAFc,yBAGbA,EAASC,MAHI,sCAKpBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMjB,SANF,yDAAH,sDAUfmB,EAAe,mCAAG,WAAOtC,GAAP,gGAEG+B,EAAAA,EAAAA,IAAA,6CAAgD/B,EAAhD,2BAAkFyB,GAFrF,cAEdO,EAFc,yBAGbA,EAASC,MAHI,sCAKpBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMjB,SANF,yDAAH,sDAUfoB,EAAY,mCAAG,WAAOC,GAAP,gGAEMT,EAAAA,EAAAA,IAAA,0DAC8BS,EAD9B,mBACwDf,GAH9D,cAEXO,EAFW,yBAIVA,EAASC,MAJC,sCAMjBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMjB,SAPL,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/getMovie.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const CastListItem = styled.li`\n  width: 250px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  padding: 10px;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-right: 0;\n  }\n`;\n\nexport const CastImage = styled.img`\n  width: 100px;\n  height: 150px;\n  object-fit: contain;\n  margin-bottom: 10px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: auto;\n  }\n`;\n\nexport const CastName = styled.p`\n  font-weight: bold;\n`;\n\nexport const CastCharacter = styled.p`\n  color: #888;\n  margin: 0 0 40px 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { getMovieCredits } from '../../services/getMovie';\n\nimport { Loader } from '../Loader';\nimport {\n  CastList,\n  CastListItem,\n  CastImage,\n  CastName,\n  CastCharacter,\n} from './Cast.styled';\nimport placeholderImage from './person-placeholder.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const creditsData = await getMovieCredits(movieId);\n        const filteredCast = creditsData.cast.map(actor => ({\n          name: actor.name,\n          id: actor.id,\n          profile_path: actor.profile_path,\n          character: actor.character || 'Unknown',\n        }));\n        setCast(filteredCast);\n      } catch (error) {\n        toast.error(`Error: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      <ToastContainer autoClose={2000} />\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {cast.length > 0 ? (\n            <CastList>\n              {cast.map(actor => (\n                <CastListItem key={actor.id}>\n                  <CastImage\n                    src={\n                      actor.profile_path\n                        ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                        : placeholderImage\n                    }\n                    alt={actor.name}\n                  />\n                  <CastName>{actor.name}</CastName>\n                  <CastCharacter>Character: {actor.character}</CastCharacter>\n                </CastListItem>\n              ))}\n            </CastList>\n          ) : (\n            <p>We don't have any cast for this movie.</p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmMTIwYzliZWMwOWE4MTJiYzM2YzNiNTNlOWU5ZjNlNSIsInN1YiI6IjY0ODM3NmJmYzlkYmY5MDBjNTcxMWJkMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.8YvYBh5kr88uuL-CjfWLbM4Y1pFnOV1o1eMa5ZNh3Q4',\n  },\n};\n\nconst getMovies = async () => {\n  try {\n    const response = await axios.get('https://api.themoviedb.org/3/trending/all/day?language=en-US', options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieById = async (movieId) => {\n  try {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieCredits = async (movieId) => {\n  try {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst searchMovies = async (keyword) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${keyword}&language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nexport { getMovies, getMovieById, getMovieCredits, getMovieReviews, searchMovies, };\n"],"names":["CastList","styled","CastListItem","CastImage","CastName","CastCharacter","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","fetchCast","getMovieCredits","creditsData","filteredCast","map","actor","name","id","profile_path","character","toast","message","autoClose","Loader","length","src","alt","options","method","headers","accept","Authorization","getMovies","axios","response","data","console","error","Error","getMovieById","getMovieReviews","searchMovies","keyword"],"sourceRoot":""}