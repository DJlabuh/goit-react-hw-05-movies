{"version":3,"file":"static/js/387.b7644041.chunk.js","mappings":"kTAEaA,EAAaC,EAAAA,GAAAA,GAAH,iEAKVC,EAAaD,EAAAA,GAAAA,GAAH,gDAIVE,EAASF,EAAAA,GAAAA,EAAH,8C,SCkDnB,EAlDgB,WACd,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,gHAESC,EAAAA,EAAAA,IAAgBT,GAFzB,OAEXU,EAFW,OAGXC,EAAkBD,EAAYE,QAAQC,KAAI,SAAAC,GAAM,MAAK,CACzDC,GAAID,EAAOC,GACXC,OAAQF,EAAOE,OACfC,QAASH,EAAOG,QAHoC,IAKtDb,EAAWO,GARM,gDAUjBO,EAAAA,GAAAA,MAAA,gDAAuB,KAAMC,UAVZ,yBAYjBb,GAAa,GAZI,4EAAH,qDAgBlBE,GACD,GAAE,CAACR,KAGF,iCACE,SAAC,KAAD,CAAgBoB,UAAW,MAC1Bf,GACC,SAACgB,EAAA,EAAD,KAEA,8BACGlB,EAAQmB,OAAS,GAChB,SAAC1B,EAAD,UACGO,EAAQU,KAAI,SAAAC,GAAM,OACjB,UAAChB,EAAD,YACE,UAACC,EAAD,WAAQ,WAASe,EAAOE,WACxB,uBAAIF,EAAOG,YAFIH,EAAOC,GADP,OAQrB,uBAAG,kDAMd,C,iMCzDKQ,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIAC,EAAS,mCAAG,6GAESC,EAAAA,EAAAA,IAAU,+DAAgEN,GAFnF,cAERO,EAFQ,yBAGPA,EAASC,MAHF,sCAKdC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMf,SANR,yDAAH,qDAUTgB,EAAY,mCAAG,WAAOnC,GAAP,gGAEM6B,EAAAA,EAAAA,IAAA,6CAAgD7B,EAAhD,mBAA0EuB,GAFhF,cAEXO,EAFW,yBAGVA,EAASC,MAHC,sCAKjBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMf,SANL,yDAAH,sDAUZiB,EAAe,mCAAG,WAAOpC,GAAP,gGAEG6B,EAAAA,EAAAA,IAAA,6CAAgD7B,EAAhD,2BAAkFuB,GAFrF,cAEdO,EAFc,yBAGbA,EAASC,MAHI,sCAKpBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMf,SANF,yDAAH,sDAUfV,EAAe,mCAAG,WAAOT,GAAP,gGAEG6B,EAAAA,EAAAA,IAAA,6CAAgD7B,EAAhD,2BAAkFuB,GAFrF,cAEdO,EAFc,yBAGbA,EAASC,MAHI,sCAKpBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMf,SANF,yDAAH,sDAUfkB,EAAY,mCAAG,WAAOC,GAAP,gGAEMT,EAAAA,EAAAA,IAAA,0DAC8BS,EAD9B,mBACwDf,GAH9D,cAEXO,EAFW,yBAIVA,EAASC,MAJC,sCAMjBC,QAAQC,MAAR,MACM,IAAIC,MAAM,KAAMf,SAPL,yDAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/getMovie.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const ReviewItem = styled.li`\n  margin-bottom: 35px;\n`;\n\nexport const Author = styled.p`\n  font-weight: bold;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { getMovieReviews } from '../../services/getMovie';\n\nimport { Loader } from '../Loader';\nimport { ReviewList, ReviewItem, Author } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const reviewsData = await getMovieReviews(movieId);\n        const filteredReviews = reviewsData.results.map(review => ({\n          id: review.id,\n          author: review.author,\n          content: review.content,\n        }));\n        setReviews(filteredReviews);\n      } catch (error) {\n        toast.error(`Ошибка: ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      <ToastContainer autoClose={2000} />\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {reviews.length > 0 ? (\n            <ReviewList>\n              {reviews.map(review => (\n                <ReviewItem key={review.id}>\n                  <Author>Author: {review.author}</Author>\n                  <p>{review.content}</p>\n                </ReviewItem>\n              ))}\n            </ReviewList>\n          ) : (\n            <p>We don't have any reviews for this movie.</p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmMTIwYzliZWMwOWE4MTJiYzM2YzNiNTNlOWU5ZjNlNSIsInN1YiI6IjY0ODM3NmJmYzlkYmY5MDBjNTcxMWJkMCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.8YvYBh5kr88uuL-CjfWLbM4Y1pFnOV1o1eMa5ZNh3Q4',\n  },\n};\n\nconst getMovies = async () => {\n  try {\n    const response = await axios.get('https://api.themoviedb.org/3/trending/all/day?language=en-US', options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieById = async (movieId) => {\n  try {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieCredits = async (movieId) => {\n  try {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst getMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nconst searchMovies = async (keyword) => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${keyword}&language=en-US`, options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(error.message);\n  }\n};\n\nexport { getMovies, getMovieById, getMovieCredits, getMovieReviews, searchMovies, };\n"],"names":["ReviewList","styled","ReviewItem","Author","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","fetchReviews","getMovieReviews","reviewsData","filteredReviews","results","map","review","id","author","content","toast","message","autoClose","Loader","length","options","method","headers","accept","Authorization","getMovies","axios","response","data","console","error","Error","getMovieById","getMovieCredits","searchMovies","keyword"],"sourceRoot":""}